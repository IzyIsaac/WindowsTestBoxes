# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

    # Re-used variables
    domain_fqdn = "vagrant.local"
    domain_netbios = "VAGRANT"

    dc_ip = "10.10.10.2" 
    dc_name = "DC01"
    safemode_pass = "Vagrant$af3!!"

    workstation_ip = "10.10.10.3"
    workstation_name = "WRK01"
    
    # This section builds a Windows Server 2022 domain controller
    config.vm.define "dc" do |dc|
        # Using a base box from: https://github.com/gusztavvargadr/packer/
        dc.vm.box = "gusztavvargadr/windows-server"

        # Make WinRM use basic auth. After forest is installed and server is rebooted, NTLM auth will break
        dc.winrm.transport = :plaintext
        dc.vm.communicator = "winrm"
        dc.winrm.basic_auth_only = true

        # Setup networking
        dc.vm.network "private_network", ip: dc_ip
        dc.vm.hostname = dc_name

        # VirtualBox specific settings
        dc.vm.provider "virtualbox" do |vb|
            vb.gui = true
            vb.memory = 2 * 1024
            vb.cpus = 2
        end

        # All provisioners are named so they can be called individually while debugging if they fail during initial vagrant up
        # Example: `vagrant provision --provision-with promote`

        # Promote to domain controller
        dc.vm.provision "promote", type: "shell" do |ps|
            ps.path = "./scripts/DCPromo.ps1"
            ps.args = [dc_ip, domain_fqdn, domain_netbios, safemode_pass]
            reboot = true
        end

        # Create OU structure from json template
        dc.vm.provision "create_ous", type: "shell" do |ps|
            ps.path = "./scripts/CreateOUs.ps1"
            ps.args = [domain_fqdn, "C:/vagrant/scripts/templates/OU.json"]
        end

        # Create users from json template
        dc.vm.provision "create_users", type: "shell" do |ps|
            ps.path = "./scripts/CreateUsers.ps1"
            ps.args = [domain_fqdn, "C:/vagrant/scripts/templates/Users.json"]
        end

    end

    # This section builds a Windows 10 Pro workstation and joins it to the domain
    config.vm.define "workstation" do |workstation|
        # Assumes you have a Windows 10 vagrant box installed as 'Windows10Pro' 
        # You can build a Windows 10 box with packer from the Windows10 folder in this project
        # Add the box to vagrant with: `vagrant box add --name Windows10Pro ./path/to/box`
        workstation.vm.box = "Windows10Pro"
        workstation.vm.hostname = workstation_name
        workstation.vm.communicator = "winrm"

        # Setup networking
        workstation.vm.network "private_network", ip: workstation_ip

        # Virtualbox settings
        workstation.vm.provider "virtualbox" do |vb|
            vb.gui = true
            vb.memory = 4 * 1024
            vb.cpus = 2
        end
    end
    

    

    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
    
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"
    
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
    
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
    
    # VirtualBox specific settings
    

end
